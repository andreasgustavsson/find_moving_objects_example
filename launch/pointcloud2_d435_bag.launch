<?xml version="1.0" encoding="utf-8"?>
<launch>

<!--  Rviz coordinate system: x=red, y=green, z=blue  -->
<!--  roscore is automatically started if roslaunch detects that it is not already running  -->
  
<!--   <param name="use_sim_time" value="true"/>  -->

<!--  <env name="ROSCONSOLE_CONFIG_FILE"
       value="$(find find_moving_objects)/logger_config/logger_config_debug.config"/>-->
 
  <arg name="interpreter_extra_args"
       default=""
       doc="Additional args for the pointcloud2 interpreter"
       />
  
  <arg name="frame_broadcaster_extra_args"
       default=""
       doc="Additional args for the frame broadcaster"
       />
  
  <arg name="rosbag_extra_args"
       default=""
       doc="Additional args for rosbag play"
       />
  
  <arg name="bag_path"
       default="/home/andreas/logs_d435"
       doc="Base path to log/bag files"
       />
  
  <arg name="bag" 
       default="hand_moving_2018-07-27-16-25-28.bag"
       doc="bag file to play"
       />

  <node pkg="rviz" 
        type="rviz" 
        name="rviz" 
        args="--display-config /home/andreas/.rviz/d435_pointcloud_bag.rviz"
        required="true"
        />

    <!-- Use required="true" to terminate all nodes after playing bagfile (because this node then dies) -->
  <node pkg="rosbag"
        type="play"
        name="rosbag_play"
        args="--wait-for-subscribers
              --topics /camera/depth/color/points/filtered /tf_static
              $(arg rosbag_extra_args)
              --bags $(arg bag_path)/$(arg bag)"
        />
  
  <!--<include file="$(find realsense2_camera)/launch/rs_camera.launch">
           <arg name="enable_pointcloud" value="true"/>
           <arg name="align_depth" value="true"/>
           <arg name="enable_sync" value="true"/>
  </include>-->
  
  <node pkg="find_moving_objects"
        type="pointcloud2_interpreter_node"
        name="pointcloud2_interpreter"
        args="--print_all_options
              --subscribe_topic /camera/depth/color/points/filtered_echoed
              --sensor_frame_has_z_axis_forward
              --base_frame base_link
              --fixed_frame odom
              --map_frame map
              --subscribe_buffer_size 1
              --publish_ema
              --ema_alpha 1.0
              --publish_objects_closest_point_markers
              --publish_objects_velocity_arrows
              --publish_objects_delta_position_lines
              --publish_objects_width_lines
              --velocity_arrows_use_sensor_frame
              --delta_position_lines_use_sensor_frame
              --nr_scans_in_bank 9
              --nr_points_per_scan_in_bank 360
              --voxel_leaf_size 0.01
              --threshold_z_min 0
              --threshold_z_max 1
              --object_threshold_min_speed 0.03
              --object_threshold_max_distance 6.5
              --object_threshold_min_nr_points 10
              --object_threshold_min_confidence 0
              --object_threshold_edge_max_delta_range 0.15
              --object_threshold_max_delta_width_in_points 50
              $(arg interpreter_extra_args)"
        output="screen"
        />
<!--   launch-prefix="valgrind - -tool=massif " -->
  

  <node pkg="unicorn_sensor_interpreter"
        type="moa_receiver_node"
        name="moa_receiver"
        />
    
  <node pkg="unicorn_sensor_interpreter"
        type="d435_frame_broadcaster_node"
        name="frame_broadcaster" 
        args="$(arg frame_broadcaster_extra_args)"
        />
  
  <node pkg="unicorn_sensor_interpreter"
        type="d435_voxel_echoer_node"
        name="d435_voxel_echoer"
        />
</launch>
